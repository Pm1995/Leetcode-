#Length of Last Word
s="a"

count=0
list=[]
for i in reversed(s):
	if i!=' ':
		count=count+1
	if i==' ':
		list.append(count)
		count=0
		continue
	if i==s[0]:
		list.append(count)
		count=0
		continue
if len(list)==0:
	print(0)
elif list[-1]==0:
	print(list[0])
else:
	print(list[-1])
print("\r")


#Word Pattern
pattern = "abba"
string = "dog cat cat dog"



def valid(pattern,string):
	di={}
	di2={}
	split=string.split()
	for i in range(0,len(pattern),1):
		di[pattern[i]]=i

	for j in range(0,len(split),1):
		di2[split[j]]=j

	list1=[]
	list2=[]

	for m in di:
		list1.append(di[m])

	for n in di2:
		list2.append(di2[n])

	return(list1==list2)


print(valid(pattern,string))
print("\r")



#Implement Strstr
haystack = "hello"
needle = "ll"

if needle in haystack:
	print(haystack.index(needle))
else:
	print(-1)
print("\r")



#valid palindrome 
s="A man, a plan, a canal: Panama"
s=s.lower()

s="".join(e for e in s if e.isalnum())


thres=len(s)/2

for i in range(len(s)//2):
	if s[i]==s[-(i+1)]:
		continue
	else:
		print("false")
		break
print("\r")


#valid parenthesis
s="(("

dict={"]":"[",")":"(","}":"{"}
stack=[]
if len(s)==1 or len(s)%2!=0:
	print("false")
for char in s:
	if char in dict.values():
		stack.append(char)
	elif char in dict.keys():
		if stack==[] or dict[char]!=stack.pop():
			print("false")
			break

if len(stack)==0:
	print("true")
else:
	print("false")
print("\r")


s="("
dict={"}":"{",")":"(","]":"["}

stack=[]
status=0

for char in s:
	if char in dict.values():
		stack.append(char)
	elif char in dict.keys():
		if stack==[] or dict[char]!=stack.pop():
			print("false")
			status=1
			break

if status==0 and len(stack)==0:
	print("true")
elif status==0 and len(stack)!=0:
	print("false")
print("\r")


#valid anagram 
s = "rat"
t = "car"
status=0

di={}

for i in s:
	di[i]=0

for j in s:
	if j in di:
		di[j]+=1


for m in t:
	if m in di:
		di[m]=di[m]-1
	if m not in di:
		status=1
		break


if sum(di.values())==0 and status==0:
	print("true")
else:
	print("false")
print("\r")

# Valid Anagram 
a1="aacc"
a2="ccac"

d1={}
d2={}

for i,n in enumerate(a1):
	if n not in d1:
		d1[n]=1
	else:
		d1[n]+=1


for i in a2:
	if i in d1:
		d1[i]=d1[i]-1
	else:
		d1[i]=1000


for i in d1:
	if d1[i]<0:
		d1[i]=1000


if sum(d1.values())==0:
	print("true")
else:
	print("false")
print("\r")


#Roman to Integer
mydict = {'I':1, 'V':5, 'X':10, 'L': 50, 'C': 100, 'D': 500, 'M':1000}
s="MCMXCIV"
val=0

for i in range(len(s)-1):
	if mydict[s[i]]<mydict[s[i+1]]:
		val=val - mydict[s[i]]
	else:
		val=val + mydict[s[i]]

print(val + mydict[s[-1]])
print("\r")


#Word Pattern 
pattern="dog cat cat dog"
string="abba"

d1={}
d2={}

l1=[]
l2=[]



if " " in pattern:
 	pattern=pattern.split()
if " " in string:
 	string=string.split()





for i,n in enumerate(pattern):
	d1[n]=i



for j,x in enumerate(string):
	d2[x]=j


for m in d1.values():
	l1.append(m)

for b in d2.values():
	l2.append(b)

print(l1==l2)
print("\r")


#longest common prefix

stri=["flight","flower","flow"]

def prefix(m):
	if not m:
		return ""
	s1=min(m)
	s2=max(m)
	for i,n in enumerate(s1):
		if n!=s2[i]:
			return(s1[:i])
	return(s1)


print(prefix(stri))
print("\r")





#summing  digits until singular digit 
input=38

def sumdigits(num):
	while num>9:
		num=sum(int(x) for x in str(num))
	return(num)

print(sumdigits(input))
print("\r")




#Reverse String by modifying the existing data structure 
inp=["h","e","l","l","o"]
#out=["o","l","l","e","h"]

count=0
while count<len(inp)//2:
	a=inp[count]
	b=inp[len(inp)-count-1]
	inp[count]=b
	inp[len(inp)-count-1]=a
	count=count+1

print(inp)
print("\r")



#Reverse wovels of string 
wovs=["a","e","i","o","u"]
temp1=[]
temp2=[]


st="hello"

for j in st:
	if j not in wovs:
		temp1.append(j)
	else:
		temp2.append(j)
		temp1.append("temp")



for m in range(len(temp1)):
	if temp1[m]=="temp":
		temp1[m]=temp2.pop()

newst=""

for m in temp1:
	newst=newst+m

print(newst)
print("\r")



#First Unique Character in String 
s = "loveleetcode"

list1=[]
dict1={}


for i in s:
	if i not in dict1:
		dict1[i]=0
	else:
		dict1[i]=dict1[i]+1

for m in dict1:
	if dict1[m]==0:
		list1.append(m)

if len(list1)==0:
	print("-1")
else:
	print(s.index(list1[0]))
print("\r")


#Given an arbitrary ransom note string and another string containing letters from all the magazines, 
#write a function that will return true if the
#ransom note can be constructed from the magazines ; otherwise, it will return false.

ransomNote="fffbfgfz"
magazine="effjfggbffjdgbjjhhdegh"

dict2={}
flag=0

for n in magazine:
	if n not in dict2:
		dict2[n]=1
	else:
		dict2[n]=dict2[n]+1

for g in ransomNote:
	if g in dict2:
		dict2[g]=dict2[g]-1
		if dict2[g]<0:
			flag=1
	else:
		flag=1

if flag==0:
	print("true")
else:
	print("false")
print("\r")




